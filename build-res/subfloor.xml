<!--===========================================================================
Copyright (c) 2008-2009, Pentaho Engineering Team
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Pentaho Corporation nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Pentaho Engineering Team ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <copyright holder> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
============================================================================-->
<!--===========================================================================
    == SUBFLOOR ==
    
    $Date: Wed Nov  6 16:13:57 UTC 2013 $
    Project Home: https://github.com/pentaho/subfloor/
    
    This file contains the default implementation of the ant tasks to 
    perform a build. This file should be included by the build.xml file 
    for your particular project. That build file should redefine any task 
    that is defined in subfloor.xml IF AND ONLY IF the function of the 
    task needs to be customized.
    
    FORMATTING: 
      ALIGNMENT: indent=2 spaces and wrap lines longer than 120 chars
      NAMING: targets intended for execution by a user are named single-word
              or hyphenated.  Internal targets use '.' notation.
    
    TO GET STARTED with your project, you will need this file in 
          your project's root directory along with three additional files:
          1. build.xml 
          2. build.properties
          3. ivy_settings.xml
          4. ivy.xml
          
          Below are some templates:
          
      === build.xml
    <project name="MyProject" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >
      <description>
        This build file is used to create the MyProject project and works with the subfloor.xml file.
      </description>

      <import file="subfloor.xml"/>
    </project>
  
    === build.properties
    project.revision=1.0-SNAPSHOT  #the version of your project.  This will appear in jar META-INF, dist artifact filenames and IVY revision metadata. 
    ivy.artifact.id=my-project   #IVY metadata describing the name of the artifact
    impl.title=My Project #English language version of your project name
    
============================================================================-->


<project name="subfloor" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        -------------------------------------------------------------------------------
        subfloor.xml provides tasks needed to perform a project build.
        It is typically not used directly but imported by each project's build.xml
        file.  The build.xml file can override tasks when customization is required.

        MAIN TARGETS
        ============
        * clean / clean-all :
        remove all artifacts of the build, clean-all adds the removal
        of any library or jar dependencies downloaded as part of the build

        * resolve :
        download/refresh library or jar dependencies needed for the build (uses Apache IVY)

        * compile :
        run javac on the project's source

        * jar :
        creates a jar file

        * dist :
        creates all project distributables

        * test :
        runs JUnit tests from your project's test source

        SPECIAL TARGETS
        ============
        * publish-local :
        builds a jar for your project and registers it with the local artifact repository isolated
        to your machine at $HOME/.ivy2/local.  Further executions of the the resolve target by this
        or other projects will find your published jar.

        * ivy-clean* :
        this family of targets helps reset your IVY environment in the event that you are having
        difficulty resolving dependencies

        TYPICAL TARGET SEQUENCE
        ============
        * clean-all resolve dist :
        a good start to build all project distributables from scratch.  Note that jar dependencies
        will not be downloaded unless you explicitly run the resolve target.  We made the resolution
        and retrieval completely discretionary since there are many situations in which
        you will not want to get or refresh dependencies, e.g. if you are offline with no Internet
        access.  In such case, you could just run "dist" if the set of jars you already have are
        sufficient.

    </description>

    <!-- Load the properties files in the proper order -->
    <property file="${basedir}/build.properties" description="Properties customized for your particular project belong in this file." />

    <!-- =================================================================================
         Property Defaults
         Any of these properties can be overridden in either build.properties or override.properties
         =================================================================================-->

    <!-- Project meta properties -->
    <property name="impl.vendor" value="Pentaho Corporation" description="Jar file metadata describing the jar's vendor" />
    <property name="impl.productID" value="" description="Jar file metadata indicating the product ID (this is not the revision)" />

    <!-- Compile properties -->
    <property name="bin.dir" value="${basedir}/bin" description="Base directory for all non-dist build output" />
    <property name="src.java.dir" value="${basedir}/src-java" description="Source code of Selenium Java tests." />
    <property name="build.dir" value="${basedir}/build" description="Build directory." />
    <property name="classes.dir" value="${build.dir}/classes" description="Classes directory created during compilation."/>
    <property name="jar.dir" value="${build.dir}/jar" description="Jar directory created during compilation."/>
    <property name="lib.dir" value="${basedir}/lib"
            description="Directory that hosts Jar files required to compile project source." />
    <property name="lib.ext.dir" value="${basedir}/lib/ext"
              description="Directory that hosts Jar files required to compile project source. (IVY will populate this directory with required jars)" />
    <property name="tmp.dir" value="${basedir}/tmp" description="Temp directory only used for temp procedures" />
    <property name="resources.dir" value="${basedir}/resources" description="All itens need during the test execution." />
    
    <!-- Third party Ant tasks and tools properties -->
    <property name="subfloor.resources.dir"
              value="${user.home}/.subfloor"
              description="Base dir for runtime jars that are required exclusively by the build process" />
    <property name="subfloor.tmp.dir"
              value="${subfloor.resources.dir}/tmp"
              description="Temporary space where files are prepared for installation" />
    <property name="antcontrib.build.cache.dir"
              value="${subfloor.resources.dir}/ant-contrib"
              description="Directory where the Ant-Contrib jar (and dependencies) is placed after it is auto-downloaded by the build" />
    <property name="ivy.url"
              value="http://repo.pentaho.org/artifactory/repo/org/apache/ivy/ivy/2.4.0-rc1/ivy-2.4.0-rc1.jar"
              description="The URL to the current release of Apache IVY" />
    <property name="pentaho.bi.server.dir"
              value="C:\Pentaho\5.1\biserver-ce-5.1.0.0-752\biserver-ce"
              description="The location of Pentaho BI Server" />
    <property name="pentaho.bi.server.service.name" value="tomcat6" description="The service name of BI Server" />
    <property name="pentaho.bi.server.url" value="http://localhost:8080/pentaho" description="The URL to access the Pentaho Server." />

    <!-- Ivy properties -->
    <property name="ivy.settingsurl"
              value="file:${basedir}/ivysettings.xml"
              description="URL to the (common) ivysettings.xml.  This file is required by the build to configure IVY.  Note you must escape the ':' if this property exists in a .properties file" />
    <property name="ivy.file"
              value="ivy.xml"
              description="The name of the IVY xml file defining your project's dependencies" />
    <property name="ivy.artifact.group"
              value="pentaho"
              description="IVY metadata describing the originating company or organization" />
    <property name="ivy.artifact.ivyfilename"
              value="ivy.xml"
              description="The name of the IVY xml file to deploy with the artifact" />
    <property name="ivy.reports.dir"
              value="${bin.dir}/reports/ivy"
              description="Base directory that holds all IVY dependency report files" />
    <property name="ivy.configs" value="*" description="Set of configs used for IVY reporting and checking operations" />
    <property name="ivy.use.symlinks" value="true" description="Flag indicating if Ivy should create symlinks when retrieving artifacts."/>

    <!-- TEST propertis -->
    <property name="test.html.reports.dir" value="${basedir}/reports-html" description="Directory to drag reports for the selenium html scripts"/>
    <property name="test.java.reports.dir" value="${basedir}/reports-java" description="Directory to drag reports"/>
    <property name="test.java.reports.html.dir" value="${basedir}/reports-java/html" description="Directory to drag "/>

    <!-- CLASSPATH FOR TEST-JAVA -->
    <path id="test.java.classpath">
        <fileset dir="${lib.ext.dir}" includes="**/*" />
        <pathelement location="${classes.dir}" />
    </path>


    <!-- Set the project revision number to the value in the manifest file (if it has not
         been specified in the properties file -->
    <fail message="A project revision number has not been determined!">
        <condition>
            <matches string="${project.revision}" pattern="\$\{.*\}" />
        </condition>
    </fail>

    <!-- Set the project title to the value in the manifest file (if it has not
         been specified in the properties file -->
    <fail message="A project title has not been determined!">
        <condition>
            <matches string="${impl.title}" pattern="\$\{.*\}" />
        </condition>
    </fail>

    <!-- Build Mode properties -->
    <property name="release" value="false" description="Set this to true if you want to generate a release artifact" />

    <!-- Ivy should only use symlinks if we're not in release mode -->
    <condition property="ivy.use.symlinks.internal">
        <and>
            <isfalse value="${release}"/>
            <istrue value="${ivy.use.symlinks}"/>
        </and>
    </condition>

    <!-- Set the os property -->
    <condition property="isLinux">
      <os family="unix" />
    </condition>
    <condition property="isWindows">
      <os family="windows" />
    </condition>
    <condition property="isMac">
      <os family="mac" />
    </condition>

    <condition property="os.classifier" value="win">
      <os family="windows" />
    </condition>
    <condition property="os.classifier" value="mac">
      <os family="mac" />
    </condition>
    <condition property="os.classifier" value="linux">
      <os family="unix" />
    </condition>
    <property name="os.classifier" value="unsupported" />

    <!--=======================================================================
        default

        The target that is run if no target is given
        ====================================================================-->
    <target name="default" depends="test-html" />


    <!--=======================================================================
        compile

        Compile the script tests in Java
        ====================================================================-->
    <target name="compile" depends="resolve-test-java">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.java.dir}" destdir="${classes.dir}"
               fork="yes"
               debug="true"
               includeAntRuntime="false"
               classpathref="test.java.classpath"
               nowarn="true"/>
    </target>

    <!--=======================================================================
        test-java

        This process shall clean the project, compile the tests and run them.
        ====================================================================-->
    <target name="test-java" depends="clean-java, compile, stop-pentaho-bi-server">
      
      <!-- Starting Pentaho BI Server -->
      <antcall target="start-pentaho-bi-server"/>
      <antcall target="waitfor-pentaho-bi-server-started"/>

    </target>


    <!--=======================================================================
        test-html

        This process shall clean the project, download the CTools, and copy to
        Pentaho Server.
        ====================================================================-->
    <target name="test-html" depends="clean-html, resolve-plugin, stop-pentaho-bi-server">
        <!-- copy data to the server -->
        <antcall target="copy-plugin-samples"/>

        <!-- Starting Pentaho BI Server -->
        <antcall target="start-pentaho-bi-server"/>
        <antcall target="waitfor-pentaho-bi-server-started"/>
    </target>


    <!--=======================================================================
        run-test-java

        This process shall execute Selenium Java tests.
        ====================================================================-->
    <target name="run-test-java">
        <mkdir dir="${test.java.reports.dir}"/>
        <junit fork="yes" printsummary="true" showoutput="true" haltonfailure="false" haltonerror="false">
            <classpath refid="test.java.classpath" />

            <formatter type="plain"/>
            <formatter type="xml"/>

            <batchtest todir="${test.java.reports.dir}">
                <fileset dir="${classes.dir}" includes="**/CToolsTestSuite.class"/>
            </batchtest>
        </junit>
        <junitreport todir="${test.java.reports.dir}">
            <fileset dir="${test.java.reports.dir}">
                <include name="${test.java.reports.dir}/TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.java.reports.dir}/html"/>
        </junitreport>
    </target>

    <!--=======================================================================
        generate-junit-report

        This process shall generate the html report of the executed tests.
        ====================================================================-->
    <target name="generate-junit-report">
        <junitreport todir="${test.java.reports.dir}">
            <fileset dir="${test.java.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.java.reports.html.dir}"/>
        </junitreport>
    </target>

    <!--=======================================================================
        copy-plugin-samples

        Copy the CTools and samples to Pentaho server.
        ====================================================================-->
    <target name="copy-plugin-samples">
      <echo message="Starting copy CTools." />

      <!-- Delete ctools on server -->
      <property name="pentaho.default.content.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/default-content"/>
      <property name="pentaho.plugin.cgg.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/cgg"/>
      <property name="pentaho.plugin.cda.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/cda"/>
      <property name="pentaho.plugin.cdf.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/pentaho-cdf"/>
      <property name="pentaho.plugin.cde.dir" value="${pentaho.bi.server.dir}/pentaho-solutions/system/pentaho-cdf-dd"/>
      <!-- Delete CGG, CDA, CDF, CDE-->
      <delete dir="${pentaho.plugin.cgg.dir}" />
      <delete dir="${pentaho.plugin.cda.dir}" />
      <delete dir="${pentaho.plugin.cdf.dir}" />
      <delete dir="${pentaho.plugin.cde.dir}" />

      <!-- Unzip the ctools -->
      <unzip src="${lib.ext.dir}/plugin/cgg.zip" dest="${tmp.dir}" />
      <unzip src="${lib.ext.dir}/plugin/cda.zip" dest="${tmp.dir}" />
      <unzip src="${lib.ext.dir}/plugin/pentaho-cdf.zip" dest="${tmp.dir}" />
      <unzip src="${lib.ext.dir}/plugin/pentaho-cdf-dd.zip" dest="${tmp.dir}" />
      <!-- unzip the samples -->
      <!-- 
          1º Create a directory with name 'public'
          2º Create a directory with name 'plugin-samples' under 'public'
          3º Unzip the samples CDF, CDE and CDA
          4º Move the samples dir (CDF, CDE, CDA) under 'plugin-samples'
      -->
      <mkdir dir="${tmp.dir}/public/plugin-samples" />
      <unzip src="${lib.ext.dir}/plugin/pentaho-cdf-samples.zip" dest="${tmp.dir}/public/plugin-samples" />
      <unzip src="${lib.ext.dir}/plugin/pentaho-cdf-dd-solution.zip" dest="${tmp.dir}/public/plugin-samples" />
      <unzip src="${lib.ext.dir}/plugin/cda-samples.zip" dest="${tmp.dir}/public/plugin-samples" />
      <!-- copy the files for CGG tests -->
      <copy todir="${tmp.dir}/public">
        <fileset dir="${resources.dir}/cgg" />
      </copy>
      <zip destfile="${tmp.dir}/plugin-samples.zip">
        <zipfileset dir="${tmp.dir}/public" prefix="public"/>
      </zip>

      <!-- Copy the ctools -->
      <copy todir="${pentaho.plugin.cgg.dir}">
        <fileset dir="${tmp.dir}/cgg" />
      </copy>
      <copy todir="${pentaho.plugin.cda.dir}">
        <fileset dir="${tmp.dir}/cda" />
      </copy>
      <copy todir="${pentaho.plugin.cdf.dir}">
        <fileset dir="${tmp.dir}/pentaho-cdf" />
      </copy>
      <copy todir="${pentaho.plugin.cde.dir}">
        <fileset dir="${tmp.dir}/pentaho-cdf-dd" />
      </copy>
      <copy file="${tmp.dir}/plugin-samples.zip" todir="${pentaho.default.content.dir}" />
    </target>

    <!--=======================================================================
        Wait for tomcat start-up
        ====================================================================-->
    <target name="waitfor-pentaho-bi-server-started"> 
          <waitfor maxwait="5" maxwaitunit="minute" checkevery="500">
              <http url="${pentaho.bi.server.url}"/>
          </waitfor>
    </target>


    <!--=======================================================================
        Shall start the pentaho-server
        ====================================================================-->
    <target name="start-pentaho-bi-server">
      <echo message="Start the Pentaho BI Server." />
      <service action="start" service="${pentaho.bi.server.service.name}"/>
    </target>


    <!--=======================================================================
        Shall stop the pentaho-server
        ====================================================================-->
    <target name="stop-pentaho-bi-server">
      <echo message="Stop the Pentaho BI Server." />
      <service action="stop" service="${pentaho.bi.server.service.name}"/>
    </target>


    <!--=======================================================================
        install-antcontrib

        (Fetches and) installs ant-contrib tasks.
        ====================================================================-->
    <target name="install-antcontrib" depends="antcontrib.download-check">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <fileset dir="${antcontrib.build.cache.dir}">
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </taskdef>
    </target>


    <!--=======================================================================
        antcontrib.download-check

        Fetches ant-contrib from sourceforge if it is not already present
        ====================================================================-->
    <target name="antcontrib.download-check">
        <condition property="antcontrib.available">
            <and>
                <available file="${antcontrib.build.cache.dir}" />
                <available classname="net.sf.antcontrib.logic.IfTask">
                    <classpath>
                        <fileset dir="${antcontrib.build.cache.dir}">
                            <include name="*.jar" />
                        </fileset>
                    </classpath>
                </available>
            </and>
        </condition>
        <antcall target="antcontrib.download" />
    </target>


    <!--=======================================================================
        antcontrib.download

        Fetches ant-contrib from sourceforge
        ====================================================================-->
    <target name="antcontrib.download" unless="antcontrib.available">
        <mkdir dir="${subfloor.tmp.dir}" />
        <get src="http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b3-bin.zip"
             dest="${subfloor.tmp.dir}/antcontrib.zip"
             usetimestamp="true" />
        <unzip src="${subfloor.tmp.dir}/antcontrib.zip" dest="${subfloor.tmp.dir}">
            <patternset>
                <include name="**/*.jar" />
            </patternset>
        </unzip>
        <copy todir="${antcontrib.build.cache.dir}">
            <fileset dir="${subfloor.tmp.dir}/ant-contrib">
                <include name="**/*.jar" />
            </fileset>
        </copy>
    </target>


    <!--=======================================================================
        install-ivy

        Fetches and installs IVY ant tasks if not already installed
        ====================================================================-->
    <target name="install-ivy" depends="install-antcontrib">
        <if>
            <istrue value="${ivy.isinstalled}" />
            <then>
                <echo message="Skipping IVY install. IVY has already been configured by the build" />
            </then>
            <else>
                <download-antlib name="ivy" url="${ivy.url}" classname="org.apache.ivy.ant.IvyTask" extension="jar" />
                <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
                    <classpath>
                        <fileset dir="${subfloor.resources.dir}/ivy">
                            <include name="*.jar" />
                        </fileset>
                    </classpath>
                </taskdef>
                <ivy:settings url="${ivy.settingsurl}" />
                <property name="ivy.isinstalled" value="true" />
            </else>
        </if>
    </target>


    <!--=======================================================================
        resolve-plugin

        Using ivy and the dependencies for the project (defined in the ivy.xml
        file), this task will retrieve the needed files and place them into
        the defined directories.
        ====================================================================-->
    <target name="resolve-plugin" depends="install-ivy" description="Retrieves all the dependent libraries">
            <echo message="Resolve dependencies." />
            <ivy:resolve file="${ivy.file}" conf="plugin"/>
            <ivy:retrieve pattern="${lib.ext.dir}/[conf]/[artifact].[ext]" symlink="${ivy.use.symlinks.internal}"/>
    </target>

    <!--=======================================================================
        resolve-test-java

        Using ivy and the dependencies for the project (defined in the ivy.xml
        file), this task will retrieve the needed files and place them into
        the defined directories.
        ====================================================================-->
    <target name="resolve-test-java" depends="install-ivy" description="Retrieves all the dependent libraries">
        <echo message="Resolve dependencies." />
        <ivy:resolve file="${ivy.file}" conf="test-java"/>
        <ivy:retrieve pattern="${lib.ext.dir}/[conf]/[artifact](-[classifier]).[ext]" symlink="${ivy.use.symlinks.internal}"/>
    </target>


    <!--=======================================================================
        ivy-clean-all
        
        Clean the cache and local.
        ====================================================================-->
    <target name="ivy-clean-all" depends="ivy-clean-cache,ivy-clean-local"/>



    <!--=======================================================================
        ivy-clean-local

        Completely cleans your local repository of any files published locally
        by way of publish-local.
        WARNING: this is a global action and will affect other IVY projects
        currently referencing a locally published dependency
        ====================================================================-->
    <target name="ivy-clean-local" depends="install-ivy">
        <delete dir="${ivy.local.default.root}/" />
    </target>


    <!--=======================================================================
        ivy-clean-by-name

        Cleans your IVY cache and local repository of specific files.
        WARNING: this is a global action and will affect other IVY projects
        currently referencing a locally published dependency
        ====================================================================-->
    <target name="ivy-clean-pentaho" depends="install-ivy">
        <mkdir dir="${ivy.local.default.root}" />
        <!-- just in case it doesn't exist -->
        <for param="dir">
            <path>
                <dirset dir="${ivy.local.default.root}" includes="*${ivy.clean.pattern}*" />
                <dirset dir="${ivy.default.ivy.user.dir}/cache" includes="*${ivy.clean.pattern}*" />
            </path>
            <sequential>
                <delete dir="@{dir}" includeemptydirs="true" />
            </sequential>
        </for>
        <for param="file">
            <path>
                <fileset dir="${ivy.local.default.root}" includes="*${ivy.clean.pattern}*" />
                <fileset dir="${ivy.default.ivy.user.dir}/cache" includes="*${ivy.clean.pattern}*" />
            </path>
            <sequential>
                <delete file="@{file}" />
            </sequential>
        </for>
    </target>

    <!--=======================================================================
        ivy-clean-cache

        Cleans the IVY cache.  You are erasing IVY's memory.  Run this if you
        want to force IVY to go fetch all your project dependencies from scratch.
        WARNING: this will affect all IVY projects, not just the current workspace
        ====================================================================-->
    <target name="ivy-clean-cache" depends="install-ivy">
        <ivy:cleancache />
    </target>

    <!--=======================================================================
        ivy-report

        Generates an IVY dependency report for this project.
        ====================================================================-->
    <target name="ivy-report" depends="install-ivy">
        <ivy:resolve file="${ivy.file}" conf="${ivy.configs}" />
        <ivy:report xml="true" todir="${ivy.reports.dir}" />
    </target>

    <!--=======================================================================
        clean-html

        Removes regarding the target 'test-html'
        ====================================================================-->
    <target name="clean-html" description="Cleans all the files generated from ctools">
      <delete dir="${lib.ext.dir}" />
      <delete dir="${tmp.dir}" />
      <delete dir="${test.html.reports.dir}" />
    </target>

    <!--=======================================================================
        clean-java

        Removes regarding the target 'test-java'
        ====================================================================-->
    <target name="clean-java" description="Cleans the directories created when build selenium java tests">
    	  <delete dir="${bin.dir}" />
    	  <delete dir="${build.dir}" />
        <delete dir="${test.java.reports.dir}" />
        <delete dir="${lib.ext.dir}" />
    </target>

     <!--=======================================================================
        clean

        Removes all the files generated during the execution test for html and 
        java's selenium tests.
        ====================================================================-->
    <target name="clean" depends="clean-html,clean-java"
            description="Cleans all the files generated on selenium html and java tests" />

    <!--=======================================================================
        clean-all

        Removes all the files generated from build processes and ivy-downloaded jars
        ====================================================================-->
    <target name="clean-all" depends="clean-html,clean-java,ivy-clean-all"
            description="Cleans all the files generated from a build as well IVY-downloaded jars" />


    <!--=======================================================================
        Macro which will download the specified library.

        NOTE: any task using this macro must depend on "install-antcontrib"

        parameters:
        name      - The name of the library (the filename w/o extension)
        url       - The URL from which the library will be downloaded
        resource  - The name of the resource which should be loaded
                    as a task definition
        classname - A class file name which can be used to detect if the
                    property library exists
        extension - The extension of the library being downloaded
                    (defaults to zip)
        ====================================================================-->
    <macrodef name="download-antlib">
        <attribute name="name" />
        <attribute name="url" />
        <attribute name="classname" />
        <attribute name="extension" default="zip" />
        <sequential>
            <mkdir dir="${subfloor.resources.dir}/@{name}/" />
            <!-- if the library does not exist, we must download it -->
            <if>
                <not>
                    <and>
                        <available file="${subfloor.resources.dir}/@{name}" />
                        <available classname="@{classname}">
                            <classpath>
                                <fileset dir="${subfloor.resources.dir}/@{name}">
                                    <include name="**/*.jar" />
                                </fileset>
                            </classpath>
                        </available>
                    </and>
                </not>
                <then>
                    <!-- if it is a zip file, unzip it ... otherwise if a jar, just download it -->
                    <if>
                        <equals arg1="zip" arg2="@{extension}" />
                        <then>
                            <!-- download the source file to a temp directory -->
                            <echo message="downloading library @{name} [@{name}.@{extension} from @{url}]" />
                            <mkdir dir="${subfloor.tmp.dir}" />
                            <get src="@{url}" dest="${subfloor.tmp.dir}/@{name}.@{extension}" usetimestamp="true" />
                            <unzip src="${subfloor.tmp.dir}/@{name}.@{extension}"
                                   dest="${subfloor.resources.dir}/@{name}"
                                   overwrite="true" />
                        </then>
                        <else>
                            <get src="@{url}" dest="${subfloor.resources.dir}/@{name}/@{name}.@{extension}" usetimestamp="true" />
                        </else>
                    </if>
                </then>
            </if>
        </sequential>
    </macrodef>


    <!--=======================================================================
        Macro usage to start or stop a service.

        parameters:
        action    - The name of the library (the filename w/o extension)
        service   - The URL from which the library will be downloaded
        ====================================================================-->
    <macrodef name="service">
      <attribute name="service"/>
      <attribute name="action"/>
      <sequential>
        <exec executable="cmd.exe">
          <arg line="/c net @{action} '@{service}'"/>
         </exec>
      </sequential>
    </macrodef>

</project>